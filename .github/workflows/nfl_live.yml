name: NFL Live Poster

on:
  workflow_dispatch: {}        # Manual trigger any time
  schedule:
    # --- SUNDAY WINDOWS (CT → UTC) ------------------------------------------
    - cron: "*/5 12-17 * * 0"  # Europe/London games (≈ 7:00–12:59 CT while CDT; 6:00–11:59 CT after DST)
    - cron: "*/5 17-23 * * 0"  # Early & late Sunday games (≈ 12:00–18:59 CT)
    - cron: "*/5 0-6 * * 1"    # Sunday Night Football spillover (≈ 7:00 PM–12:59 AM CT)

    # --- MONDAY NIGHT FOOTBALL (kick ~7:15 PM CT ⇒ 00:15–~04:15 UTC Tue) ----
    - cron: "*/5 0-6 * * 2"    # Tue 00:00–05:59 UTC (covers MNF across CDT/CST)

    # --- THURSDAY NIGHT FOOTBALL (kick ~7:15 PM CT ⇒ 00:15–~04:15 UTC Fri) ---
    - cron: "*/5 0-6 * * 5"    # Fri 00:00–05:59 UTC (covers TNF across CDT/CST)

    # --- SATURDAYS (late season) --------------------------------------------
    - cron: "*/5 17-23 * * 6"  # Sat 11:00–17:59 CT windows (covers typical Sat slates)
    - cron: "*/5 0-6 * * 0"    # Sun 00:00–05:59 UTC to catch late Sat finishes

    # --- FRIDAY SPECIALS (e.g., Black Friday) -------------------------------
    - cron: "*/5 17-23 * * 5"  # Fri afternoon/evening CT (Black Friday and rare Friday games)

jobs:
  live:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: nfl-live
      cancel-in-progress: false
    env:
      TZ: America/Chicago                 # Make “today”/times align with CT in logs
      DRY_RUN: "1"                        # 1 = test mode, 0 = actually post
      LIVE_LOG_DIR: "R/logs/live_runner_logs"
      LIVE_CSV_DIR: "R/output/live_csv"

      # Posting creds (repo → Settings → Secrets and variables → Actions)
      BSKY_HANDLE: ${{ secrets.BSKY_HANDLE }}
      BSKY_APP_PASSWORD: ${{ secrets.BSKY_APP_PASSWORD }}
      MASTO_SERVER: ${{ secrets.MASTO_SERVER }}
      MASTO_TOKEN: ${{ secrets.MASTO_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Pull LFS files (models)
        run: git lfs pull || true

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: "4.4.1"
          use-public-rspm: true

      - name: Install R packages
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: true
          extra-packages: |
            any::dplyr
            any::readr
            any::glue
            any::tibble
            any::dotenv
            any::rtoot
            any::nflreadr
            github::nflverse/nflfastR
            any::lubridate
            any::here
            any::purrr
            any::tidyr
            any::jsonlite
            any::httr2
            any::data.table
            any::xgboost
            any::caret
            any::pROC

      # ---- Guard: run only near actual kickoffs (Chicago time) --------------
      - name: Guard – run only near kickoff windows
        id: guard
        shell: bash
        env:
          TZ: America/Chicago
        run: |
          out=$(Rscript - <<'RS'
          suppressPackageStartupMessages({
            library(nflreadr); library(lubridate); library(dplyr)
          })

          tz_ct <- "America/Chicago"
          now_ct <- lubridate::now(tzone = tz_ct)
          today_ct <- as_date(now_ct)

          sched <- nflreadr::load_schedules(seasons = nflreadr::most_recent_season())

          # Helper: best-effort kickoff time parser -> POSIXct in CT
          kickoff_ct <- function(df){
            n <- nrow(df); if (!n) return(as.POSIXct(character(0), tz = tz_ct))
            has <- function(x) x %in% names(df)
            # Try UTC columns first if present
            if (has("gametime_utc")) {
              kt <- suppressWarnings(ymd_hms(df$gametime_utc, tz = "UTC"))
              return(with_tz(kt, tz_ct))
            }
            if (has("gamedatetime") || has("game_datetime")) {
              col <- if (has("gamedatetime")) "gamedatetime" else "game_datetime"
              kt <- suppressWarnings(ymd_hms(df[[col]], tz = "UTC"))
              return(with_tz(kt, tz_ct))
            }
            # Fall back: combine gameday + gametime, assume ET if tz missing
            if (has("gameday") && has("gametime")) {
              try_et <- suppressWarnings(ymd_hm(paste(df$gameday, df$gametime), tz = "America/New_York"))
              if (all(is.na(try_et))) {
                try_ct <- suppressWarnings(ymd_hm(paste(df$gameday, df$gametime), tz = tz_ct))
                return(try_ct)
              } else {
                return(with_tz(try_et, tz_ct))
              }
            }
            # As a last resort, return NA vector
            rep(as.POSIXct(NA, tz = tz_ct), n)
          }

          # Today’s games (by date, CT)
          sched$gameday_date <- suppressWarnings(as.Date(sched$gameday))
          todays <- sched %>% filter(!is.na(gameday_date), gameday_date == today_ct)

          kt <- kickoff_ct(todays)
          if (length(kt)) {
            # Window: 30 min before kickoff through 5.5 hours after (SNF overruns)
            start <- kt - minutes(30)
            end   <- kt + hours(5) + minutes(30)
            within <- any(!is.na(start) & !is.na(end) & now_ct >= start & now_ct <= end)
          } else {
            # If we can’t parse times, fall back to "it’s a game day"
            within <- nrow(todays) > 0
          }

          cat(paste0("should_run=", tolower(as.character(within)), "\n"))
RS
          )
          echo "$out" >> "$GITHUB_OUTPUT"

      - name: Run live chunk (8 min window, 20s polls)
        if: steps.guard.outputs.should_run == 'true'
        run: Rscript -e "source('R/bots/run_live_chunk.R'); run_live_chunk(duration_minutes = 8, poll_seconds = 20)"

      - name: Upload live logs & CSVs
        if: steps.guard.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: live-${{ github.run_id }}
          path: |
            R/logs/live_runner_logs/**
            R/output/live_csv/**
          if-no-files-found: ignore
          retention-days: 14
