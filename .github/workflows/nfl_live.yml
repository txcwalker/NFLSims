name: NFL Live Poster

on:
  workflow_dispatch: {}
  schedule:
    # --- SUNDAY WINDOWS (CT → UTC) ------------------------------------------
    - cron: "*/10 12-17 * * 0"  # Europe/London games (≈ 7:00–12:59 CT while CDT; 6:00–11:59 CT after DST)
    - cron: "*/10 17-23 * * 0"  # Early & late Sunday games (≈ 12:00–18:59 CT)
    - cron: "*/10 0-6 * * 1"    # Sunday Night Football spillover (≈ 7:00 PM–12:59 AM CT)

    # --- MONDAY NIGHT FOOTBALL ----------------------------------------------
    - cron: "*/10 0-6 * * 2"    # Tue 00:00–05:59 UTC (covers MNF across CDT/CST)

    # --- THURSDAY NIGHT FOOTBALL --------------------------------------------
    - cron: "*/10 0-6 * * 5"    # Fri 00:00–05:59 UTC (covers TNF across CDT/CST)

    # --- SATURDAYS (late season) --------------------------------------------
    - cron: "*/10 17-23 * * 6"  # Sat afternoon/evening CT
    - cron: "*/10 0-6 * * 0"    # Sun 00:00–05:59 UTC to catch late Sat finishes

    # --- FRIDAY SPECIALS -----------------------------------------------------
    - cron: "*/10 17-23 * * 5"  # Fri afternoon/evening CT (Black Friday and rare Friday games)

jobs:
  live:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: nfl-live
      cancel-in-progress: true
    env:
      TZ: America/Chicago
      DRY_RUN: "1"                        # keep dry-run ON
      LIVE_LOG_DIR: "R/logs/live_runner_logs"
      LIVE_CSV_DIR: "R/output/live_csv"
      BSKY_HANDLE: ${{ secrets.BSKY_HANDLE }}
      BSKY_APP_PASSWORD: ${{ secrets.BSKY_APP_PASSWORD }}
      MASTO_SERVER: ${{ secrets.MASTO_SERVER }}
      MASTO_TOKEN: ${{ secrets.MASTO_TOKEN }}
      NFL_LIVE_URL: ${{ secrets.NFL_LIVE_URL }}
      NFL_LIVE_TOKEN: ${{ secrets.NFL_LIVE_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Pull LFS files (models)
        run: git lfs pull || true

      # System libs needed by httr2/rtoot/etc.
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: "4.4.1"
          use-public-rspm: true

      - name: Install R packages (cached)
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: true
          extra-packages: |
            any::dplyr
            any::readr
            any::glue
            any::tibble
            any::dotenv
            any::rtoot
            any::atrrr
            any::nflreadr
            github::nflverse/nflfastR
            any::lubridate
            any::here
            any::purrr
            any::tidyr
            any::jsonlite
            any::httr2
            any::data.table
            any::xgboost
            any::caret
            any::pROC

      # ---- Guard: run only near actual kickoffs (Chicago time)
      - name: Guard – run only near kickoff windows
        id: guard
        shell: bash
        env:
          TZ: America/Chicago
        run: |
          cat > guard.R << 'EOF'
          suppressPackageStartupMessages({
            library(nflreadr); library(lubridate); library(dplyr)
          })
          tz_ct <- "America/Chicago"
          now_ct <- lubridate::now(tzone = tz_ct)
          today_ct <- as_date(now_ct)
          sched <- nflreadr::load_schedules(seasons = nflreadr::most_recent_season())
          kickoff_ct <- function(df){
            n <- nrow(df); if (!n) return(as.POSIXct(character(0), tz = tz_ct))
            has <- function(x) x %in% names(df)
            if (has("gametime_utc")) {
              kt <- suppressWarnings(ymd_hms(df$gametime_utc, tz = "UTC"))
              return(with_tz(kt, tz_ct))
            }
            if (has("gamedatetime") || has("game_datetime")) {
              col <- if (has("gamedatetime")) "gamedatetime" else "game_datetime"
              kt <- suppressWarnings(ymd_hms(df[[col]], tz = "UTC"))
              return(with_tz(kt, tz_ct))
            }
            if (has("gameday") && has("gametime")) {
              try_et <- suppressWarnings(ymd_hm(paste(df$gameday, df$gametime), tz = "America/New_York"))
              if (all(is.na(try_et))) {
                try_ct <- suppressWarnings(ymd_hm(paste(df$gameday, df$gametime), tz = tz_ct))
                return(try_ct)
              } else {
                return(with_tz(try_et, tz_ct))
              }
            }
            rep(as.POSIXct(NA, tz = tz_ct), n)
          }
          sched$gameday_date <- suppressWarnings(as.Date(sched$gameday))
          todays <- sched %>% filter(!is.na(gameday_date), gameday_date == today_ct)
          kt <- kickoff_ct(todays)
          if (length(kt)) {
            start <- kt - minutes(30)
            end   <- kt + hours(5) + minutes(30)
            within <- any(!is.na(start) & !is.na(end) & now_ct >= start & now_ct <= end)
          } else {
            within <- nrow(todays) > 0
          }
          cat(paste0("should_run=", tolower(as.character(within)), "\n"))
          EOF
          out=$(Rscript guard.R)
          echo "$out" >> "$GITHUB_OUTPUT"

      # ---- Single tick: find + evaluate 4th downs right now (no inner loop)
      - name: Run one live tick (dry-run)
        if: steps.guard.outputs.should_run == 'true'
        run: |
          Rscript -e "
            source('R/bots/run_fd_live_once.R');
            source('R/bots/posting_policy.R');
            source('R/bots/post_targets.R');

            has_paid <- nzchar(Sys.getenv('NFL_LIVE_URL', ''));
            if (has_paid) {
              source('R/bots/fetch_live_plays.R');
              f <- fetch_live_plays
            } else {
              source('R/bots/fetch_live_plays_nflreadr.R');
              f <- fetch_live_plays_nflreadr
            }

            ts <- format(Sys.time(), '%Y%m%d_%H%M%S')
            csv_dir <- Sys.getenv('LIVE_CSV_DIR', 'R/output/live_csv')
            log_dir <- Sys.getenv('LIVE_LOG_DIR', 'R/logs/live_runner_logs')
            dir.create(csv_dir, recursive = TRUE, showWarnings = FALSE)
            dir.create(log_dir, recursive = TRUE, showWarnings = FALSE)

            res <- tryCatch(
              run_fd_live_once(fetcher = f, dry_run = TRUE),
              error = function(e) {
                writeLines(paste('ERROR', conditionMessage(e)),
                           file.path(log_dir, paste0('tick_', ts, '.log')))
                NULL
              }
            )

            if (is.null(res)) {
              readr::write_csv(tibble::tibble(note = 'no-data-returned'),
                               file.path(csv_dir, paste0('tick_', ts, '.csv')))
            } else if (nrow(res) == 0) {
              readr::write_csv(tibble::tibble(note = 'no-fourth-downs-found'),
                               file.path(csv_dir, paste0('tick_', ts, '.csv')))
            } else {
              readr::write_csv(res, file.path(csv_dir, paste0('tick_', ts, '.csv')))
            }
          "

      - name: Upload live logs & CSVs
        if: steps.guard.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: live-${{ github.run_id }}
          path: |
            R/logs/live_runner_logs/**
            R/output/live_csv/**
          if-no-files-found: ignore
          retention-days: 14
